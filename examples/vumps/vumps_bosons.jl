using ITensors, ITensors.HDF5
using Revise
using ITensorInfiniteMPS
using DelimitedFiles

using PyCall; ENV["KMP_DUPLICATE_LIB_OK"] = true
import PyPlot
tkz = pyimport("tikzplotlib")
const plt = PyPlot; 
plt.matplotlib.use("TkAgg"); ENV["MPLBACKEND"] = "TkAgg"; plt.pygui(true); plt.ion()

include(
  joinpath(
    pkgdir(ITensorInfiniteMPS), "examples", "vumps", "src", "vumps_subspace_expansion.jl"
  ),
)

function ITensorInfiniteMPS.unit_cell_terms(::Model"QFM_model"; J1 = 1., J2 = 1., V = 1., U = 1.)
  #= hamiltonian definition =#
  ampo = OpSum()  
  ampo += -J1*(1), "Adag", 1, "A", 2
  ampo += -J1*(1), "Adag", 2, "A", 1

  ampo += -J1*(-1)^(1), "Adag", 2, "A", 3
  ampo += -J1*(-1)^(1), "Adag", 3, "A", 2

  ampo += V, "N", 1, "N", 2 #dens dens interaction
  ampo += V, "N", 2, "N", 3 #dens dens interaction

  ampo += -J2*exp(1im*10e-8), "Adag", 1, "A", 3
  ampo += -J2*exp(-1im*10e-8), "Adag", 3, "A", 1

  ampo += -J2*exp(1im*10e-8), "Adag", 2, "A", 4
  ampo += -J2*exp(-1im*10e-8), "Adag", 4, "A", 2

  ampo += U/2, "N", 1, "N", 1 #on-site interaction
  ampo += -U/2, "N", 1 
  ampo += U/2, "N", 2, "N", 2 #on-site interaction
  ampo += -U/2, "N", 2 
  return ampo
end

function ITensorInfiniteMPS.unit_cell_terms_vuletic(::Model"Vuletic"; J3 = 1., J6 = 1., α = 1.)
    #= hamiltonian definition =#
    ampo = OpSum()  
    ampo += J3/2, "Adag", 1, "A", 2
    ampo += J3/2, "Adag", 2, "A", 1
  
    ampo += J3/2, "Adag", 2, "A", 3
    ampo += J3/2, "Adag", 3, "A", 2
  
    ampo += J6, "N", 1, "N", 2 #dens dens interaction
    ampo += J6, "N", 2, "N", 3 #dens dens interaction

    ampo += J6*(α^2), "N", 1, "N", 3 #dens dens interaction
    ampo += J6*(α^2), "N", 2, "N", 4  #dens dens interaction

    ampo += J3*α/2, "Adag", 1, "A", 3
    ampo += J3*α/2, "Adag", 3, "A", 1
  
    ampo += J3*α/2, "Adag", 2, "A", 4
    ampo += J3*α/2, "Adag", 4, "A", 2
  
    ampo += -J6/2, "N", 1, "N", 1 #on-site interaction
    ampo += -J6/2, "N", 2, "N", 2
    ampo += -J6*(α^2)/2, "N", 1, "N", 1 #on-site interaction
    ampo += -J6*(α^2)/2, "N", 2, "N", 2
    return ampo
  end


##############################################################################
#VUMPS parameters
#
function VUMPS(;
    J1 = 1., J2 = 0.4, V = 1., U = 6.,
    maxdim = 80, # Maximum bond dimension
    cutoff = 1e-7, # Singular value cutoff when increasing the bond dimension
    max_vumps_iters = 200, # Maximum number of iterations of the VUMPS algorithm at each bond dimension
    vumps_tol = 1e-5,
    V_pres = 0,
    outer_iters = 5, # Number of times to increase the bond dimension
    localham_type = MPO, # or ITensor
    conserve_qns = true,
    eager = true,
    reupload = false
    )
    ##############################################################################
    # CODE BELOW HERE DOES NOT NEED TO BE MODIFIED
    #

    N = 2 # Unit cell size

    @show N
    @show localham_type

    if reupload == true
        f = h5open("MPS.h5","r")
        ψ = read(f,"psi_U($U)_V($V_pres)_N($N)_J2($J2)_dim($maxdim)_V", InfiniteCanonicalMPS)
        s = siteinds(ψ)
        close(f)
    else
        initstate(n) = isodd(n) ? "1" : "0" #half filling
        s = @show infsiteinds("Boson", N; dim = 4, initstate, conserve_qns)
        ψ = InfMPS(s, initstate)
    end

    model = Model("Vuletic")
    model_params = (J3 = V, J6 = 1, α = 0.5)
    # Form the Hamiltonian 

    H = InfiniteSum{localham_type}(model, s; model_params...)
    #println(H)

    # Check translational invariance
    println("\nCheck translational invariance of initial infinite MPS")
    @show norm(contract(ψ.AL[1:N]..., ψ.C[N]) - contract(ψ.C[0], ψ.AR[1:N]...))

    outputlevel = 1
    vumps_kwargs = (tol=vumps_tol, maxiter=max_vumps_iters, outputlevel, eager)
    subspace_expansion_kwargs = (cutoff=cutoff, maxdim=maxdim)

    println("\nRun VUMPS on initial product state, unit cell size $N")
    ψ = vumps_subspace_expansion(H, ψ; outer_iters, subspace_expansion_kwargs, vumps_kwargs)

    h5open("MPS.h5","cw") do f
        if haskey(f, "psi_U($U)_V($V)_N($N)_J2($J2)_dim($maxdim)_V")
            delete_object(f, "psi_U($U)_V($V)_N($N)_J2($J2)_dim($maxdim)_V")
        end
        write(f,"psi_U($U)_V($V)_N($N)_J2($J2)_dim($maxdim)_V",ψ)
    end

    # Check translational invariance
    println("\nCheck translational invariance of optimized infinite MPS")
    @show norm(contract(ψ.AL[1:N]..., ψ.C[N]) - contract(ψ.C[0], ψ.AR[1:N]...))

    function expect_two_site(ψ::InfiniteCanonicalMPS, h::ITensor, n1n2)
        n1, n2 = n1n2
        ϕ = ψ.AL[n1] * ψ.AL[n2] * ψ.C[n2]
        return (noprime(ϕ * h) * dag(ϕ))[]
    end

    function correlation_matrix(ψ::InfiniteCanonicalMPS, op1, op2, dim)
        C = zeros(ComplexF64, dim, dim)
        for i in 1:dim
            for j in (i+1):dim
                h = op(op1, siteinds(ψ)[i]) * op(op2, siteinds(ψ)[j])
                ϕ = ψ.AL[i]
                for k in (i+1):(j)
                    ϕ *= ψ.AL[k]
                end
                ϕ *= ψ.C[j]
                C[i,j] = (noprime(ϕ * h) * dag(ϕ))[]
            end
        end
        return C + C'
    end

    function expect_three_site(ψ::InfiniteCanonicalMPS, h::MPO, n1n2n3)
        h = prod(h)
        n1, n2, n3 = n1n2n3
        ϕ = ψ.AL[n1] * ψ.AL[n2] * ψ.AL[n3] * ψ.C[n3]
        return (noprime(ϕ * h) * dag(ϕ))[]
    end

    function expect_two_site(ψ::InfiniteCanonicalMPS, h::MPO, n1n2)
        return expect_two_site(ψ, prod(h), n1n2)
    end

    function expect_two_site(ψ::MPS, h::ITensor, n1n2)
        n1, n2 = n1n2
        ψ = orthogonalize(ψ, n1)
        ϕ = ψ[n1] * ψ[n2]
        return (noprime(ϕ * h) * dag(ϕ))[]
    end

    function expect_three_site(ψ::MPS, h::ITensor, n1n2n3)
        n1, n2, n3 = n1n2n3
        ψ = orthogonalize(ψ, n1)
        ϕ = ψ[n1] * ψ[n2] * ψ[n3]
        return (noprime(ϕ * h) * dag(ϕ))[]
    end

    Nup = [expect(ψ, "N", n) for n in 1:N]
    dim = (0.5-Nup[1])-(0.5-Nup[2])
    C = correlation_matrix(ψ, "Adag", "A", 6)
    bow = zeros(ComplexF64, 4)
    for i in 1:4
        bow[i] = C[i,(i+1)]+C[(i+1),i]+C[(i+1),(i+2)]+C[(i+2),(i+1)]
    end

    bs = [(1,2,3), (2,3,4), (3,4,5)]
    energy_infinite = map(b -> expect_three_site(ψ, H[b[1]], b), bs)

    println("\nResults from VUMPS")
    @show V
    @show real.(energy_infinite)
    println("\nCDW order")
    @show dim
    println("\nBOW order")
    @show bow[1]
    return energy_infinite, real(dim), real(bow[1])
end

Vs = [0.7, 0.8, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.945, 0.95, 0.955, 0.96, 0.97, 0.98, 0.99, 1.0, 1.1, 1.3]
dim = zeros(length(Vs))
bow = zeros(length(Vs))
direction = "right"

if direction == "right"
    reverse!(Vs)
end
for (ind, V) in enumerate(Vs)
    J2 = 0.4; V = V; U = 6
    maxdim = 3

    if ind == 1
        reupload = false
        V_pres = Vs[ind]
    else
        reupload = true
        V_pres = Vs[ind-1]
    end

    E, dim[ind], bow[ind] = VUMPS(; V = V, U = U, J2 = J2, maxdim = maxdim, V_pres = V_pres, reupload = reupload)
    open("iDMRG_data_$direction.txt", "a") do io
        writedlm(io, real.([U V J2 dim[ind] abs(bow[ind]) (E[1]+E[2])/2]))
    end
end

function long_range_two(ψ::InfiniteCanonicalMPS, op1, op2, dim)
    C = zeros(ComplexF64, dim-1)
    for i in [1]
        for j in (i+1):dim
            h = op(op1, siteinds(ψ)[i]) * op(op2, siteinds(ψ)[j])
            ϕ = ψ.AL[i]
            for k in (i+1):(j)
                ϕ *= ψ.AL[k]
            end
            ϕ *= ψ.C[j]
            C[j-1] = (noprime(ϕ * h) * dag(ϕ))[]
        end
    end
    return C
end

function BDBD(i, j)
    ampo = OpSum()
    ampo += 1, "Adag", i, "A", i+1, "Adag", j, "A", j+1
    ampo += 1, "Adag", i, "A", i+1, "Adag", j+1, "A", j
    ampo += 1, "Adag", i, "A", i+1, "Adag", j+1, "A", j+2
    ampo += 1, "Adag", i, "A", i+1, "Adag", j+2, "A", j+1

    ampo += 1, "Adag", i+1, "A", i, "Adag", j, "A", j+1
    ampo += 1, "Adag", i+1, "A", i, "Adag", j+1, "A", j
    ampo += 1, "Adag", i+1, "A", i, "Adag", j+1, "A", j+2
    ampo += 1, "Adag", i+1, "A", i, "Adag", j+2, "A", j+1

    ampo += 1, "Adag", i+1, "A", i+2, "Adag", j, "A", j+1
    ampo += 1, "Adag", i+1, "A", i+2, "Adag", j+1, "A", j
    ampo += 1, "Adag", i+1, "A", i+2, "Adag", j+1, "A", j+2
    ampo += 1, "Adag", i+1, "A", i+2, "Adag", j+2, "A", j+1

    ampo += 1, "Adag", i+2, "A", i+1, "Adag", j, "A", j+1
    ampo += 1, "Adag", i+2, "A", i+1, "Adag", j+1, "A", j
    ampo += 1, "Adag", i+2, "A", i+1, "Adag", j+1, "A", j+2
    ampo += 1, "Adag", i+2, "A", i+1, "Adag", j+2, "A", j+1
end

function long_range_BDBD(ψ::InfiniteCanonicalMPS, dim)
    s = siteinds(ψ)
    C = zeros(ComplexF64, dim-2)
    for i in [1]
        for j in (i+2):dim
            h = prod(MPO(BDBD(i,j), s))
            ϕ = ψ.AL[i]
            for k in (i+1):(j+2)
                ϕ *= ψ.AL[k]
            end
            ϕ *= ψ.C[j+2]
            C[j-2] = (noprime(ϕ * h) * dag(ϕ))[]
        end
    end
    return C
end

function ITensors.op(::OpName"Sz", ::SiteType"Boson", s1::Index) #Sz operator equivalent for hardcore bosons
    sz = -1/2*op("Id", s1) + op("N", s1)
    return sz
end

Vs = [0.9]
for (ind, V) in enumerate(Vs)
    J2 = 0.4; V = 0.9; U = 6
    N = 2
    maxdim = 3
    f = h5open("MPS.h5","r")
    ψ = read(f,"psi_U($U)_V($V)_N($N)_J2($J2)_dim($maxdim)_V", InfiniteCanonicalMPS)
    s = siteinds(ψ)
    close(f)

    L = 5
    SzSz = long_range_two(ψ, "Sz", "Sz", L)
    open("correlators.txt", "a") do io
        write(io, "#V=$V, BD = $maxdim\n")
        writedlm(io, SzSz')
    end
    #BdBd = long_range_BDBD(ψ, L)
end

#why do i have to overload method and add the package name? 
#why can't i just use the function name?
#why should i include vumps_subspace_expansion directly and it is not in the package?
let
#60
#=
matr1 = [
    6.0	0.7	0.4	1.6558162434010537e-5	0.19101706922189998	-0.4643520321591512
    6.0	0.8	0.4	3.064607118297147e-6	0.1687995171529033	-0.45359617907553323
    6.0	0.81	0.4	-1.9260702806889185e-5	0.16672815464068358	-0.4525314913620865
    6.0	0.82	0.4	-2.2492571631893554e-5	0.16468718166591245	-0.45146879904922843
    6.0	0.83	0.4	-2.1581746317334005e-5	0.1626696460805105	-0.45040809568958134
    6.0	0.84	0.4	-2.51563838754576e-5	0.16067430718438158	-0.44934937618945103
    6.0	0.85	0.4	-1.6632827723683796e-5	0.15870667064942579	-0.4482926378340957
    6.0	0.86	0.4	3.421438919609665e-5	0.15674608526358935	-0.4472378883314068
    6.0	0.87	0.4	3.8944827750575506e-5	0.1548103732346212	-0.44618513578487795
    6.0	0.88	0.4	-2.1296175290508312e-5	0.15289817622012392	-0.4451343571558575
    6.0	0.89	0.4	-3.447054036398445e-5	0.150984182031355	-0.44408557534988147
    6.0	0.9	0.4	-3.621961062749701e-5	0.14909523357437604	-0.44303878530052443
    6.0	0.91	0.4	-4.3945825649926995e-5	0.14721425639290675	-0.44199399158408925
    6.0	0.92	0.4	-6.377338842750158e-5	0.14535239114208065	-0.4409511807741451
    6.0	0.93	0.4	-8.873312260326838e-5	0.1435066626880065	-0.43991037152401213
    6.0	0.94	0.4	-0.00012579035895959878	0.1416822500219136	-0.43887155080027146
    6.0	0.95	0.4	-0.00017419800362272753	0.13988379613089152	-0.4378347236983351
    6.0	0.96	0.4	-0.00022675126137966517	0.13811272426691346	-0.43679990710144406
    6.0	0.97	0.4	-0.00030266604897061233	0.13637108441774382	-0.4357670817780207
    6.0	0.98	0.4	-0.00039751958978356816	0.13465191570467672	-0.43473625458916654
    6.0	0.99	0.4	-0.0005616140373636558	0.1329547816815847	-0.4337074341128725
    6.0	1.0	0.4	-0.0008035049398841254	0.13127471713710526	-0.43268063645351856
    6.0	1.01	0.4	-0.0011526213896354554	0.12960761843186375	-0.4316558219966671
    6.0	1.02	0.4	-0.054314238853840846	0.1060139621745807	-0.4306330543641429
    6.0	1.03	0.4	-0.0791310506763288	0.07584341499914382	-0.429612344637919
    6.0	1.04	0.4	-0.08774960283283362	0.06101502813767756	-0.4285936570736399
    6.0	1.05	0.4	-0.09248664000993467	0.05250268997338525	-0.4275770055194176
    6.0	1.06	0.4	-0.09613916815913182	0.04612805750366766	-0.42656237297825383
    6.0	1.07	0.4	-0.09923784088648868	0.04104411771584071	-0.42554973405069385
    6.0	1.08	0.4	-0.10201647678150944	0.03683657840803445	-0.4245391546929571
    6.0	1.09	0.4	-0.10459697342750074	0.033270499929023645	-0.42353060319130054
    6.0	1.1	0.4	-0.1070555577042438	0.030185850563889116	-0.4225240961408126
    6.0	1.3	0.4	-0.1559200381947431	0.005191189465403978	-0.402824331370001
]
=#
#80

matr1 = [
    5.0	0.7	0.4	-0.05964591765946148	0.3277325589540387	-0.43226053667984754
    5.0	0.8	0.4	-0.01070498593260305	0.2822585391675424	-0.42199407936183975
    5.0	0.805	0.4	-0.0026122472226794424	0.24284088965409106	-0.42148823944600916
    5.0	0.81	0.4	-0.002696793334020453	0.2411274655434722	-0.42097595768684265
    5.0	0.815	0.4	-0.002783972402150392	0.23941856422740943	-0.4204641299947127
    5.0	0.82	0.4	-0.002873860950964424	0.23771422308451018	-0.4199527565463094
    5.0	0.825	0.4	-0.0029665476790392553	0.2360144609521822	-0.41944183746754704
    5.0	0.83	0.4	-0.003062123978011533	0.23431929265913376	-0.4189313729345908
    5.0	0.835	0.4	-0.0031606841845823186	0.2326287291158496	-0.41842136310856703
    5.0	0.84	0.4	-0.003262330703673988	0.23094277143289993	-0.41791180815177675
    5.0	0.845	0.4	-0.0033671662428946814	0.2292614197074811	-0.41740270823282233
    5.0	0.85	0.4	-0.003475298915478764	0.22758466729843374	-0.416894063518074
    5.0	0.855	0.4	-0.003586842188912309	0.22591250071052366	-0.4163858741675569
    5.0	0.86	0.4	-0.0037019150672825685	0.22424489939326547	-0.4158781403938606
    5.0	0.865	0.4	-0.0038206394540804545	0.22258183913864155	-0.41537086231180265
    5.0	0.87	0.4	-0.003943150144872676	0.22092327992628852	-0.41486404014982914
    5.0	0.875	0.4	-0.00406958039947658	0.21926918291533215	-0.41435767406226065
    5.0	0.88	0.4	-0.004200071878435796	0.21761949891249066	-0.4138517642419641
    5.0	0.885	0.4	-0.0043347796406455474	0.2159741624452834	-0.4133463108817857
    5.0	0.89	0.4	-0.004473857751351451	0.2143331079590633	-0.412841314099484
    5.0	0.895	0.4	-0.004617476394711217	0.21269625135686326	-0.41233677418338577
    5.0	0.9	0.4	-0.004765817926777993	0.21106348927867052	-0.41183269146088386
    5.0	0.905	0.4	-0.00491905712870222	0.20943473609013902	-0.41132906562075666
    5.0	0.91	0.4	-0.0050774010574044515	0.2078098552740864	-0.4108258973249896
    5.0	0.915	0.4	-0.005241060924673413	0.2061887098476129	-0.4103231866221698
    5.0	0.92	0.4	-0.005410263688523376	0.20457114679409888	-0.40982093372518835
    5.0	0.925	0.4	-0.005585249808988391	0.20295698857375738	-0.4093191388329675
    5.0	0.93	0.4	-0.005766271598029005	0.20134605440081305	-0.4088178021512521
    5.0	0.935	0.4	-0.00595359963853459	0.19973815097255626	-0.4083169238889462
    5.0	0.94	0.4	-0.006147510608875584	0.19813310137360257	-0.4078165042671389
    5.0	0.945	0.4	-0.00634827533769311	0.19653076565649719	-0.4073165434798395
    5.0	0.95	0.4	-0.006556157090398862	0.19493104056541244	-0.4068170417470852
    5.0	0.955	0.4	-0.00677143428053445	0.1933337784966649	-0.4063179993038559
    5.0	0.96	0.4	-0.006994408266650209	0.19173878358297114	-0.40581941634962004
    5.0	0.965	0.4	-0.007225421949174304	0.19014577495740748	-0.40532129311702764
    5.0	0.97	0.4	-0.0074648568862073494	0.1885544147949283	-0.4048236298201574
    5.0	0.975	0.4	-0.007713086096775401	0.18696439030833345	-0.4043264266164587
    5.0	0.98	0.4	-0.007970580481968859	0.1853752451148155	-0.4038296840217609
    5.0	0.985	0.4	-0.008237790512997	0.1837866031316444	-0.40333340197907175
    5.0	0.99	0.4	-0.008515206054264812	0.18219800300238997	-0.4028375808002229
    5.0	0.995	0.4	-0.008803361281491728	0.18060895222811463	-0.40234222072784764
    5.0	1.0	0.4	-0.009102815861585123	0.1790189269395046	-0.4018473220073637
    5.0	1.005	0.4	-0.009414177129803025	0.17742735060982912	-0.4013528849177771
    5.0	1.01	0.4	-0.009738104865005037	0.17583358204217686	-0.4008589096689489
    5.0	1.015	0.4	-0.010075292516967538	0.1742369393873749	-0.4003653965302826
    5.0	1.02	0.4	-0.010426498062075684	0.17263666247038534	-0.39987234576135106
    5.0	1.025	0.4	-0.010792547918346551	0.17103190384670502	-0.3993797575954292
    5.0	1.03	0.4	-0.01117431120396345	0.16942175872718718	-0.3988876323406787
    5.0	1.035	0.4	-0.011572763860516866	0.16780518646362674	-0.39839597016433015
    5.0	1.04	0.4	-0.0119889343183196	0.16618107006007637	-0.39790477143702374
    5.0	1.045	0.4	-0.01242396706569604	0.16454813834577903	-0.39741403640411793
    5.0	1.05	0.4	-0.012879100390520204	0.16290498621659194	-0.3969237652794051
    5.0	1.055	0.4	-0.013355695058649752	0.16125003491337397	-0.3964339583930586
    5.0	1.06	0.4	-0.013855236257765857	0.1595815214931347	-0.3959446160349168
    5.0	1.065	0.4	-0.014379367534070875	0.15789744862430655	-0.39545573848069615
    5.0	1.07	0.4	-0.014929901209685181	0.156195558524654	-0.3949673259309166
    5.0	1.075	0.4	-0.01550886454854078	0.15447326259783845	-0.3944793786863453
    5.0	1.08	0.4	-0.01611843900417742	0.15272769931128355	-0.39399189727414285
    5.0	1.085	0.4	-0.016761142780504723	0.15095547533940362	-0.39350488166722375
    5.0	1.09	0.4	-0.01743972687039408	0.1491527753103496	-0.3930183324062363
    5.0	1.095	0.4	-0.01815731970758988	0.14731513149467096	-0.3925322498592158
    5.0	1.1	0.4	-0.01891745892615221	0.14543732522962344	-0.39204663392590716
    5.0	1.105	0.4	-0.01972408014809318	0.14351335396830162	-0.391561485639926
    5.0	1.11	0.4	-0.020581869178020074	0.1415358430977917	-0.3910768042639914
    5.0	1.115	0.4	-0.02149592968760916	0.13949641111129146	-0.39059259129695617
    5.0	1.12	0.4	-0.022472420219490807	0.1373845949293459	-0.3901088459010794
    5.0	1.125	0.4	-0.023590275186599285	0.1350774867029948	-0.3896255700791472
    5.0	1.13	0.4	-0.024719180852765477	0.13276985062923236	-0.3891427625766194
    5.0	1.135	0.4	-0.025936474516626284	0.13034090752570981	-0.38866042369791937
    5.0	1.14	0.4	-0.02725413270360011	0.12776600342976252	-0.38817855493265674
    5.0	1.145	0.4	-0.028687284040882943	0.12501254763946512	-0.3876971561788186
    5.0	1.15	0.4	-0.030255136971749252	0.12203688849277444	-0.3872162278278223
    5.0	1.155	0.4	-0.031983215874133	0.11877792179847635	-0.3867357702810451
    5.0	1.16	0.4	-0.03390801211615618	0.1151441949412646	-0.38625578392253046
    5.0	1.165	0.4	-0.03679013550873095	0.10959822354973014	-0.3857762714830647
    5.0	1.17	0.4	-0.04281981277311675	0.0958176252719175	-0.3852554523545484
    5.0	1.175	0.4	-0.04526126033537847	0.09009962362813762	-0.38477661697949384
    5.0	1.18	0.4	-0.046729430416346085	0.0867487860920807	-0.3842790298231319
    5.0	1.185	0.4	-0.01862222664051688	0.11989164527303972	-0.3838634307827776
    5.0	1.19	0.4	-0.01964879601784386	0.11819020521528212	-0.3833862673517885
    5.0	1.195	0.4	-0.02063289485229991	0.11654604621621834	-0.3829095896693043
    5.0	1.2	0.4	-0.021680609246673865	0.11486457071077327	-0.38243338202034954
    5.0	1.25	0.4	-0.037552867099249765	0.09386503278653324	-0.3776974332325415
    5.0	1.3	0.4	-0.0699723492568034	0.04620166085805055	-0.3730093561834803        ]


matr1 = reshape(matr1, (Int(length(matr1)/6), 6))

matr2 = [
    6.0	1.3	0.4	0.1554391459921854	0.006357000708895555	-0.40282427406416643
    6.0	1.25	0.4	0.12761131769695427	0.0019356916369607235	-0.40767488514416783
    6.0	1.2	0.4	0.11486029878250387	0.0029845999161728365	-0.41257449402176316
    6.0	1.195	0.4	0.11367121036369976	0.003119177029992537	-0.4130672955752426
    6.0	1.19	0.4	0.11249702553335617	0.0032606617515057446	-0.4135606109457908
    6.0	1.185	0.4	0.11133748210760053	0.0034101902796197514	-0.4140544412119568
    6.0	1.18	0.4	0.11019223967594999	0.0035698300954473128	-0.4145487880450858
    6.0	1.175	0.4	0.10906123984953048	0.003738173347167084	-0.4150436460320376
    6.0	1.17	0.4	0.10794411787572578	0.003916870906238157	-0.415539016783268
    6.0	1.165	0.4	0.10684055632306483	0.00410728487978973	-0.4160349000795355
    6.0	1.16	0.4	0.10575026690761652	0.004310287022956771	-0.4165312951493936
    6.0	1.155	0.4	0.10467290833523107	0.004527778728726228	-0.41702820253519823
    6.0	1.15	0.4	0.1036082399846619	0.004760264196151831	-0.41752562187026004
    6.0	1.145	0.4	0.10255612049401958	0.005007675723318283	-0.41802355161441396
    6.0	1.14	0.4	0.10151646861681796	0.005269723062568565	-0.41852199299699044
    6.0	1.135	0.4	0.10048895190128831	0.005547783580755472	-0.41902094589737493
    6.0	1.13	0.4	0.09947327239958104	0.005843685661762188	-0.4195204048818748
    6.0	1.125	0.4	0.09846880376402545	0.006160166954527924	-0.4200203743965616
    6.0	1.12	0.4	0.09747511341643456	0.006498830064849193	-0.4205208532726543
    6.0	1.115	0.4	0.09649165899419121	0.006862431763176469	-0.42102184205359916
    6.0	1.11	0.4	0.09551776747003954	0.007254714796443462	-0.42152333852348234
    6.0	1.105	0.4	0.0945526567518597	0.00767980015829739	-0.42202534291915605
    6.0	1.1	0.4	0.09359549079005797	0.008141857497412253	-0.42252785512612034
    6.0	1.095	0.4	0.09264525586004335	0.008646858773875166	-0.4230308752944475
    6.0	1.09	0.4	0.09170053670134143	0.009202576820387498	-0.4235344017208413
    6.0	1.085	0.4	0.09075994437091162	0.009816377776660001	-0.4240384351749973
    6.0	1.08	0.4	0.089821270095434	0.010500733253115513	-0.424542975209276
    6.0	1.075	0.4	0.08888179144650543	0.011270328992237677	-0.42504802142301695
    6.0	1.07	0.4	0.08793771372989162	0.012145332907570472	-0.42555357449343156
    6.0	1.065	0.4	0.08698356755335052	0.013153754320932909	-0.42605963093296095
    6.0	1.06	0.4	0.08601178946094046	0.014332198236412186	-0.42656619398767515
    6.0	1.055	0.4	0.08501241364772938	0.015723783679408077	-0.4270732620477453
    6.0	1.05	0.4	0.08397637261327096	0.01735526657303288	-0.4275808348900862
    6.0	1.045	0.4	0.0829051067652643	0.01918739329475161	-0.4280889123864434
    6.0	1.04	0.4	0.08181367706135356	0.02111888841482268	-0.428597494014021
    6.0	1.035	0.4	0.08071351346067807	0.023088351256022932	-0.4291065798604564
    6.0	1.03	0.4	0.07960382785894277	0.02510243703347048	-0.4296161692942104
    6.0	1.025	0.4	0.0784750502451868	0.027203515257887667	-0.43012626223275396
    6.0	1.02	0.4	0.07731353584453965	0.02944211100713956	-0.4306368584453324
    6.0	1.015	0.4	0.0761016862472354	0.03187401161695669	-0.4311479578881321
    6.0	1.01	0.4	0.07481820280534546	0.03455677702090798	-0.43165955975633036
    6.0	1.005	0.4	0.07343654679165973	0.037552322170177344	-0.43217166482260616
    6.0	1.0	0.4	0.07192412124000541	0.04092448077841471	-0.43268427115522357
    6.0	0.995	0.4	0.0702412186555581	0.04473628505256755	-0.43319738136889985
    6.0	0.99	0.4	0.06833750468376654	0.049053390664847485	-0.43371099252485246
    6.0	0.985	0.4	0.0661608063718524	0.05390974116305047	-0.4342251073131738
    6.0	0.98	0.4	0.06365738422484846	0.059308426342652876	-0.4347397229793658
    6.0	0.975	0.4	0.060792049331434506	0.06517932332661469	-0.4352548413664876
    6.0	0.97	0.4	0.0575693846962545	0.07136198173645225	-0.43577046526166663
    6.0	0.965	0.4	0.05404391463592506	0.07763057232277182	-0.436286583422267
    6.0	0.96	0.4	0.05033430111439341	0.08371289855613684	-0.4368032053898413
    6.0	0.955	0.4	0.04658637067860932	0.08938341121277416	-0.4373203316425198
    6.0	0.95	0.4	0.042945097173630375	0.09449633701541205	-0.437837957996352
    6.0	0.945	0.4	0.039537546090241515	0.09898314138799802	-0.43835608522343716
    6.0	0.94	0.4	0.03644526052488367	0.10285608090757936	-0.4388747128824655
    6.0	0.935	0.4	0.03368933188369089	0.10619250368668698	-0.43939384103851353
    6.0	0.93	0.4	0.031248045092307553	0.10909391644676214	-0.43991346940443826
    6.0	0.925	0.4	0.02908092624799291	0.11165618648567932	-0.4404335976749974
    6.0	0.92	0.4	0.02714776840265526	0.11395524439902627	-0.4409542262031725
    6.0	0.915	0.4	0.02541137628596457	0.1160505667158771	-0.4414753551494104
    6.0	0.91	0.4	0.023841849204736587	0.11798521338284906	-0.44199697744662125
    6.0	0.905	0.4	0.022423378131147087	0.11978603077275429	-0.4425190996900309
    6.0	0.9	0.4	0.02113787527365274	0.12147780031667788	-0.44304172428116034
    6.0	0.895	0.4	0.019963402083558734	0.12308402719197375	-0.443564844120553
    6.0	0.89	0.4	0.01888512195218245	0.12462067957493184	-0.4440884641540617
    6.0	0.885	0.4	0.01789492774714785	0.1260980645013252	-0.44461258202738907
    6.0	0.88	0.4	0.01698399694898306	0.12752562862918748	-0.44513719760208004
    6.0	0.875	0.4	0.01614337187318937	0.12891232706114197	-0.4456623104791264
    6.0	0.87	0.4	0.01536989358559504	0.13026221730724163	-0.44618792096969656
    6.0	0.865	0.4	0.01465220345774565	0.13158428714305048	-0.44671402782688363
    6.0	0.86	0.4	0.013982891606811987	0.13288448399287967	-0.44724063364474076
    6.0	0.855	0.4	0.01336172704378552	0.13416415183241948	-0.4477677362779735
    6.0	0.85	0.4	0.01278259785594471	0.13542795161227028	-0.44829533562605434
    6.0	0.845	0.4	0.012241200754479709	0.13667910071429468	-0.44882343200341646
    6.0	0.84	0.4	0.011734066879311944	0.1379202279100047	-0.44935202521151774
    6.0	0.835	0.4	0.011257984229072093	0.1391536549885053	-0.44988111513214907
]

matr2=[
    5.0	1.3	0.4	-0.16840617522021506	0.10406672093724478	-0.3729149751645446
    5.0	1.25	0.4	-0.10716825570015787	0.0393366226593429	-0.37768832394524327
    5.0	1.2	0.4	-0.02163461296153696	0.11486652809286124	-0.3824333841678616
    5.0	1.195	0.4	-0.020588306222671438	0.11654607567172626	-0.38290958774102113
    5.0	1.19	0.4	-0.019604640281167873	0.118189309798028	-0.38338627486398585
    5.0	1.185	0.4	-0.0186784463820171	0.11980111545018668	-0.3838634292894444
    5.0	1.18	0.4	-0.017806586446361128	0.12138445343153867	-0.3843410541231873
    5.0	1.175	0.4	-0.016989036551919745	0.12293988098511932	-0.38481915888415785
    5.0	1.17	0.4	-0.016226839562614448	0.12446641520552701	-0.385297731808649
    5.0	1.165	0.4	-0.01551691902015323	0.12596662707553416	-0.3857767726603671
    5.0	1.16	0.4	-0.014851262421314126	0.12744713034806243	-0.38625628937311784
    5.0	1.155	0.4	-0.014226425949272259	0.1289106187880433	-0.38673627705249936
    5.0	1.15	0.4	-0.013638403357625117	0.13036021691214114	-0.3872167353692594
    5.0	1.145	0.4	-0.01308373104946553	0.13179859607200653	-0.38769766397522876
    5.0	1.14	0.4	-0.01255962846605757	0.13322780347875696	-0.3881790625180537
    5.0	1.135	0.4	-0.01206354009311389	0.1346497219286882	-0.38866093079095687
    5.0	1.13	0.4	-0.0115932786011958	0.13606590191976997	-0.38914326818361744
    5.0	1.125	0.4	-0.011146909484239742	0.1374777002919254	-0.38962607444943187
    5.0	1.12	0.4	-0.010722719887896692	0.13888629039202527	-0.3901093494720478
    5.0	1.115	0.4	-0.010319122196437991	0.14029274811063172	-0.3905930930740958
    5.0	1.11	0.4	-0.009934761277365978	0.1416979766067112	-0.3910773039798937
    5.0	1.105	0.4	-0.009568289180137801	0.14310284247879257	-0.3915619831793562
    5.0	1.1	0.4	-0.009218587379705934	0.14450809663282063	-0.39204712939595854
    5.0	1.095	0.4	-0.008884584300968501	0.1459144017454765	-0.39253274279293127
    5.0	1.09	0.4	-0.008565307424626856	0.1473223775754046	-0.3930188229127858
    5.0	1.085	0.4	-0.008259868427028305	0.14873257816489324	-0.3935053694845423
    5.0	1.08	0.4	-0.007967443430662635	0.1501455103286381	-0.3939923821984077
    5.0	1.075	0.4	-0.0076872968726307556	0.1515616211873	-0.3944798607928112
    5.0	1.07	0.4	-0.007418724487861128	0.15298133655990057	-0.39496780496777817
    5.0	1.065	0.4	-0.007161070887065302	0.1544050475705789	-0.3954562143884518
    5.0	1.06	0.4	-0.006913760587307083	0.15583309161503567	-0.3959450888134607
    5.0	1.055	0.4	-0.006676242043797076	0.15726579112681804	-0.39643442797526873
    5.0	1.05	0.4	-0.006447995315894739	0.1587034447453799	-0.39692423156369316
    5.0	1.045	0.4	-0.006228551921324432	0.16014631792235834	-0.3974144993228777
    5.0	1.04	0.4	-0.006017454576961956	0.1615946681076572	-0.3979052309374319
    5.0	1.035	0.4	-0.005814300024966024	0.163048716219767	-0.3983964261581092
    5.0	1.03	0.4	-0.005618741650545711	0.16450865025279945	-0.3988880849398492
    5.0	1.025	0.4	-0.00543036603142838	0.1659746919835443	-0.3993802067252016
    5.0	1.02	0.4	-0.005248827411088008	0.16744701917554503	-0.39987279126063047
    5.0	1.015	0.4	-0.005073815460372	0.16892579559996893	-0.4003658382397747
    5.0	1.01	0.4	-0.004905093501530511	0.1704111233832516	-0.40085934779655386
    5.0	1.005	0.4	-0.004742285477558172	0.171903210864739	-0.40135331910354133
    5.0	1.0	0.4	-0.00458522833874192	0.17340210904988154	-0.4018477525507029
    5.0	0.995	0.4	-0.004433581406310616	0.17490799710578597	-0.40234264708589884
    5.0	0.99	0.4	-0.004287197217268723	0.17642091420404946	-0.4028380033208626
    5.0	0.985	0.4	-0.004145814265416881	0.17794098347619847	-0.40333382055377526
    5.0	0.98	0.4	-0.004009232299874599	0.1794682825135133	-0.4038300986394886
    5.0	0.975	0.4	-0.003877255112177791	0.18100288737994896	-0.40432683740050523
    5.0	0.97	0.4	-0.0037496890836086205	0.18254486727782104	-0.40482403655365373
    5.0	0.965	0.4	-0.003626360634419512	0.18409428314309204	-0.40532169556175784
    5.0	0.96	0.4	-0.003507092093691322	0.18565121522440609	-0.4058198147969143
    5.0	0.955	0.4	-0.0033917622208971543	0.18721567582632592	-0.4063183939031795
    5.0	0.95	0.4	-0.0032801817645763953	0.18878776928647067	-0.40681743232417544
    5.0	0.945	0.4	-0.003172224069394991	0.19036754727923377	-0.40731692997621516
    5.0	0.94	0.4	-0.0030677543817578257	0.19195507407038903	-0.40781688663889404
    5.0	0.935	0.4	-0.00296664886862974	0.19355032350565993	-0.408317302173943
    5.0	0.93	0.4	-0.0028687584597077986	0.19515303684431992	-0.4088181762836356
    5.0	0.925	0.4	-0.0027738749756469616	0.19676302194221196	-0.40931950888966795
    5.0	0.92	0.4	-0.002630859597517188	0.1984143109608626	-0.4098212999390407
    5.0	0.915	0.4	-0.0025422532372146867	0.20003777889732233	-0.41032354876671584
    5.0	0.91	0.4	-0.0024558296115815836	0.20166904918601813	-0.4108262554057311
    5.0	0.905	0.4	-0.0023709463106889594	0.20330843388636	-0.4113294195927054
    5.0	0.9	0.4	-0.002285261583714504	0.20495761608082583	-0.41183304115073927
    5.0	0.895	0.4	-0.002194783605589612	0.20662790595662384	-0.41233712035559433
    5.0	0.89	0.4	-0.0021219917464572746	0.20827705601978863	-0.41284165647590376
    5.0	0.885	0.4	-0.002050998575923224	0.2099350242097502	-0.4133466493993929
    5.0	0.88	0.4	-0.0019817103534062186	0.21160209346783074	-0.41385209893415176
    5.0	0.875	0.4	-0.0019139285088093927	0.21327887475258067	-0.4143580048786997
    5.0	0.87	0.4	-0.0018472314531831069	0.21496669884574993	-0.4148643670908414
    5.0	0.865	0.4	-0.0017792792918912559	0.21667171731416002	-0.41537118545334684
    5.0	0.86	0.4	-0.0017070890729737331	0.2184075093433807	-0.41587845972448306
    5.0	0.855	0.4	-0.0015324838419802367	0.22048047155954573	-0.4163861901903401
    5.0	0.85	0.4	-0.0014824514546006307	0.22217549852359852	-0.4168943761060684
    5.0	0.845	0.4	-0.0014355387622034255	0.22387297818004614	-0.4174030173496487
    5.0	0.84	0.4	-0.0013908845859674224	0.22557519819408042	-0.41791211388196897
    5.0	0.835	0.4	-0.001348078051824575	0.2272831326190565	-0.41842166544036674
    5.0	0.83	0.4	-0.0013068812419052556	0.22899725614218738	-0.4189316718656988
    5.0	0.825	0.4	-0.0012671409306589387	0.23071781186173224	-0.41944213298409083
    5.0	0.82	0.4	-0.0012287416332802392	0.23244491393125535	-0.41995304863933713
    5.0	0.815	0.4	-0.0011915978960767015	0.23417860407726332	-0.42046441866203776
    5.0	0.81	0.4	-0.001155637999012693	0.2359188702700551	-0.42097624291724
    5.0	0.805	0.4	-0.0011208067770547836	0.2376656743834931	-0.42148852120785213
    5.0	0.8	0.4	-0.001087059428982684	0.23941897533733705	-0.4220012533421437
    5.0	0.7	0.4	-0.0005883985221166177	0.2756714711091802	-0.4323510035087167
                    ]

matr2 = reshape(matr2, (Int(length(matr2)/6), 6))
reverse!(matr2, dims=1)

diff = matr1[3:(end-3),6] - matr2[3:(end-3),6]
plt.figure(4)
plt.scatter(matr1[3:(end-3),2], diff, s=10)

matr_int = zeros(length(matr1[:,1]), 3)
for i in 1:length(matr1[:,1])
    matr_int[i,1] = matr1[i,2]
    if matr1[i,6] < matr2[i,6]
        matr_int[i,2] = matr1[i,4]
        matr_int[i,3] = matr1[i,5]
    else
        matr_int[i,2] = matr2[i,4]
        matr_int[i,3] = matr2[i,5]
    end 
end

plt.figure(1)
plt.scatter(matr1[:,2], matr1[:,5], s=10, label = "BOW")
plt.plot(matr1[:,2], matr1[:,5], linewidth=0.5)
plt.scatter(matr1[:,2], abs.(matr1[:,4]), s=10, label = "CDW")
plt.plot(matr1[:,2], abs.(matr1[:,4]), linewidth=0.5)
plt.title("Adiabatic from left to right")
plt.xlabel("V")

plt.figure(2)
plt.scatter(matr2[:,2], matr2[:,5], s=10, label = "BOW")
plt.plot(matr2[:,2], matr2[:,5], linewidth=0.5)
plt.scatter(matr2[:,2], abs.(matr2[:,4]), s=10, label = "CDW")
plt.plot(matr2[:,2], abs.(matr2[:,4]), linewidth=0.5)
plt.title("Adiabatic from right to left")
plt.xlabel("V")

plt.figure(3)
matr_int  = matr_int[3:(end-3),:]
plt.scatter(matr_int[:,1], abs.(matr_int[:,2]), s=10, label = "BOW")
plt.plot(matr_int[:,1], abs.(matr_int[:,2]), linewidth=0.5)
plt.scatter(matr_int[:,1], abs.(matr_int[:,3]), s=10, label = "CDW")
plt.plot(matr_int[:,1], abs.(matr_int[:,3]), linewidth=0.5)
plt.title("Interpolated")


diff = matr1[3:(end-3),6] - matr2[3:(end-3),6]
plt.figure(4)
plt.scatter(matr1[3:(end-3),2], diff, s=10)
plt.hlines(0, 0.8, 1.3, colors="r", linestyles="dashed")
plt.title("Energy difference ")

end